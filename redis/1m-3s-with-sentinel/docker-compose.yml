version: "3"
name: 'redis-cluster-with-sentinel'
services:
  redis-master:
    container_name: redis-master
    image: redis-master
    volumes:
      - redis-master-conf:/etc/redis
      - redis-master-data:/data
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - 6379:6379
    networks:
      - private
    entrypoint: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} --replica-announce-port 6379
  redis-slave:
    container_name: redis-slave
    image: redis-slave
    volumes:
      - redis-slave-conf:/etc/redis
      - redis-slave-data:/data
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - 6378:6379
    networks:
      - private
    depends_on:
      - redis-master
    command: --requirepass ${REDIS_PASSWORD} --replicaof redis-master 6379 --masterauth ${REDIS_PASSWORD} --replica-announce-port 6378
  redis-slave1:
    container_name: redis-slave1
    image: redis-slave
    volumes:
      - redis-slave1-conf:/etc/redis
      - redis-slave1-data:/data
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - 6377:6379
    networks:
      - private
    depends_on:
      - redis-master
    command: --requirepass ${REDIS_PASSWORD} --replicaof redis-master 6379 --masterauth ${REDIS_PASSWORD} --replica-announce-port 6377
  redis-slave2:
    container_name: redis-slave2
    image: redis-slave
    volumes:
      - redis-slave2-conf:/etc/redis
      - redis-slave2-data:/data
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - 6376:6379
    networks:
      - private
    depends_on:
      - redis-master
    command: --requirepass ${REDIS_PASSWORD} --replicaof redis-master 6379 --masterauth ${REDIS_PASSWORD} --replica-announce-port 6376
  redis-sentinel1:
    container_name: redis-sentinel1
    image: redis-sentinel
    volumes:
      - redis-sentinel1-conf:/etc/redis
    build:
      context: .
      dockerfile: Dockerfile-sentinel
    restart: always
    ports:
      - 26379:26379
    networks:
      - private
    depends_on:
      - redis-master
  redis-sentinel2:
    container_name: redis-sentinel2
    image: redis-sentinel
    volumes:
      - redis-sentinel2-conf:/etc/redis
    build:
      context: .
      dockerfile: Dockerfile-sentinel
    restart: always
    ports:
      - 26380:26379
    networks:
      - private
    depends_on:
      - redis-master
    command: --sentinel announce-port 26380
  redis-sentinel3:
    container_name: redis-sentinel3
    image: redis-sentinel
    volumes:
      - redis-sentinel3-conf:/etc/redis
    build:
      context: .
      dockerfile: Dockerfile-sentinel
    restart: always
    ports:
      - 26381:26379
    networks:
      - private
    depends_on:
      - redis-master
    command: --sentinel announce-port 26381
# 将配置文件挂载到docker的容器卷中管理
volumes:
  redis-master-conf:
  redis-slave-conf:
  redis-slave1-conf:
  redis-slave2-conf:
  redis-master-data:
  redis-slave-data:
  redis-slave1-data:
  redis-slave2-data:
  redis-sentinel1-conf:
  redis-sentinel2-conf:
  redis-sentinel3-conf:
# 创建网络让容器之间可以互相访问
networks:
  private: